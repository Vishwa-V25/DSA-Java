You are given the root node of a binary tree.Count the number of nodes present..

Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

Constraints

1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.
Time Limit: 1 sec

Output Format

The only line of output prints the number of nodes in Binary Tree

Sample Input 0

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

7
______________________________________________________________________________________________________________________________________________________________________________________________________________________

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
class node{
    int data;
    node left;
    node right;
    node(int d){
        data=d;
    }
}
public class Solution {
    static int count(node root){
      if(root==null)
          return 0;
      return 1+count(root.left)+count(root.right);
    }
    
    
   public static void main(String[] args) {
    Scanner sc= new Scanner(System.in);
    Queue<node> q=new LinkedList<>();
    node root=new node(sc.nextInt());
      q.add(root);
      while(!q.isEmpty()){
          node t=q.poll();
          int a=sc.nextInt();
          if(a!=-1){
              node nn=new node(a);
              t.left=nn;
              q.add(nn);
          }
          int b=sc.nextInt();
          if(b!=-1){
              node nn=new node(b);
              t.right=nn;
              q.add(nn);
          }
      }
       System.out.print(count(root));
    }
}
