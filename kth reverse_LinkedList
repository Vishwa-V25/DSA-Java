Given a singly linked list of integers, reverse the nodes of the linked list 'k' at a time and return its modified list.
'k' is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of 'k,' then left-out nodes, in the end, should be reversed as well.
Example :
Given this linked list: 1 -> 2 -> 3 -> 4 -> 5
For k = 2, you should return: 2 -> 1 -> 4 -> 3 -> 5
For k = 3, you should return: 3 -> 2 -> 1 -> 5 -> 4

Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
The second line of input contains a single integer depicting the value of 'k'.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element

Constraints

0 <= M <= 10^5
Where M is the size of the singly linked list.
0 <= k <= M
Time Limit: 1sec
Output Format

For each test case/query, print the elements of the updated singly linked list.

Sample Input 0

1 2 3 4 5 -1
0
Sample Output 0

1 2 3 4 5
____________________________________________________________________________________________________________________________________________________________________________________________________________________

import java.util.*;

 class Node {
        int data;
        Node next;
        Node(int data){
            this.data = data;
            this.next = null;
        }
    }

public class ReverseLinkedList {

    static Node head=null;
    static Node last=null;
    static void ins(int data) {
        Node nn = new Node(data);
        if (head == null) {
            head = nn;
            last = nn;
        } else {
            last.next = nn;
            last = nn;
        }
    }

    static Node rev(int key, Node head) {
        if (head == null) 
            return null;

        Node pre = null;
        Node cur = head;
        Node nxt = null;
        int c = 0;

        while (cur != null && c < key) {
            nxt = cur.next;
            cur.next = pre;
            pre = cur;
            cur = nxt;
            c++;
        }

        if (cur != null) {
            head.next = rev(key, cur);
        }

        return pre;
    }

    static void dis() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner z = new Scanner(System.in);
        while (z.hasNextInt()) {
            int a = z.nextInt();
            if (a == -1) {
            break;
            }
            ins(a);
        }
        int key = z.nextInt();
        if (key != 0 && head != null) {
            head = rev(key, head);
        }
        dis();
    }
}

 
